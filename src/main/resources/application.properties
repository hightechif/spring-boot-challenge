#DB LOCAL
server.port=${PORT:8080}
spring.datasource.url=jdbc:mysql://host.docker.internal:3306/localDB?zeroDateTimeBehavior=CONVERT_TO_NULL&serverTimezone=Asia/Jakarta&createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=admin123
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect
# JSON Web Token
jwt.secret=fadhilSecretKey
jwt.expirationMs=3600000
jwt.refreshExpirationMs=86400000
# Swagger
swagger.host=localhost:8080
swagger.path=/
## Database Oracle
#spring.datasource.url=jdbc:oracle:thin://rds.amazonaws.com:3306/czpremium_product?zeroDateTimeBehavior=CONVERT_TO_NULL&serverTimezone=Asia/Jakarta
#spring.datasource.username=admin
#spring.datasource.password=
#spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle10gDialect
## H2
# spring.datasource.url=jdbc:h2:mem:customlogin
# spring.datasource.driverClassName=org.h2.Driver
# spring.datasource.username=sa
# spring.datasource.password=password
# spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
##Database PostgreSQL
#spring.datasource.url = jdbc:postgresql://localhost:5432/dbname
#spring.datasource.username = postgres
#spring.datasource.password = postgres
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.max-lifetime=60000
spring.datasource.tomcat.test-while-idle=true
spring.datasource.tomcat.test-on-borrow=true
spring.datasource.tomcat.validation-query=SELECT 1
# Show or not log for each sql query
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto=update
# Naming strategy
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)
# The SQL dialect makes Hibernate generate better SQL for the chosen database
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.application.name=basic-spring-boot
# LOGGING
logging.file.name=logs/${spring.application.name}.log
logging.logback.rollingpolicy.max-file-size=1GB
logging.logback.rollingpolicy.max-history=365
server.tomcat.accesslog.enabled=false
server.tomcat.basedir=logs
server.error.include-message=always
# MESSAGE BROKER
# spring.kafka.bootstrap-servers=13.111.111.252:9092
spring.kafka.bootstrap-servers=localhost:9092
# spring.kafka.consumer.group-id=czpremium
spring.kafka.consumer.group-id=group_id
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#ACTUATOR
# management.endpoints.web.exposure.include=*
# EUREKA DISCOVERY
# eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
# eureka.client.instance.preferIpAddress=true
# eureka.client.healthcheck.enabled=true
# eureka.instance.leaseRenewalIntervalInSeconds=30
# CONSUL DISCOVERY
# spring.cloud.consul.enabled=false
